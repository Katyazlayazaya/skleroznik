 https://github.com/Katyazlayazaya/skleroznik.git
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


узнаем какие настройки Git есть в нашей системе
git config --list --show-origin

-----------------------------------------------
использование: git config [<options>]

Расположение файла конфигурации
    --[no-]global использовать глобальный файл конфигурации
    --[no-]system использует файл конфигурации системы
    --[no-]local конфигурации локального хранилища
    --[no-]worktree использовать файл конфигурации для каждого рабочего дерева
    -f, --[no-]file <файл>
                          использовать данный файл конфигурации
    --[no-]blob <blob-id> прочитать конфигурацию из данного объекта blob

Действие
    --[no-]get получить значение: имя [шаблон-значения]
    --[no-]get-all получить все значения: ключ [значение-шаблон]
    --[no-]get-regexp получить значения для регулярного выражения: name-regex [value-pattern]
    --[no-]get-urlmatch получить значение, специфичное для URL-адреса: раздел[.var] URL-адрес
    --[no-]replace-all заменить все соответствующие переменные: имя значение [шаблон значения]
    --[no-]add добавить новую переменную: имя значение
    --[no-]unset удалить переменную: имя [шаблон-значения]
    --[no-]unset-all удалить все совпадения: имя [шаблон-значения]
    --[no-]rename-section раздел переименования: старое имя новое имя
    --[no-]remove-section удалить раздел: имя
    -l, --[no-]list перечислить все
    --[no-]fixed-value использовать равенство строк при сравнении значений с «шаблоном значения»
    -e, --[no-]edit открыть редактор
    --[no-]get-color найти настроенный цвет: slot [по умолчанию]
    --[no-]get-colorbool найти настройку цвета: slot [stdout-is-tty]

Тип
    -t, --[no-]type <тип>
                          значение присваивается этому типу
    --bool значение «истина» или «ложь»
    --int значение — десятичное число
    Значение --bool-or-int равно --bool или --int
    Значением --bool-or-str является --bool или строка
    Значение --path — это путь (имя файла или каталога)
    --expiry-date — дата истечения срока действия

Другой
    -z, --[no-]null завершать значения с нулевым байтом
    --[no-]name-only показывать только имена переменных
    --[no-]включает уважение директив включения при поиске
    --[no-]show-origin показать источник конфигурации (файл, стандартный ввод, большой двоичный объект, командная строка)
    --[no-]show-scope показать область конфигурации (рабочее дерево, локальное, глобальное, системное, командное)
    --[no-]default <значение>
                          с --get, использовать значение по умолчанию, если отсутствует запись
-----------------------------------------------------------

----------------------------Настройка имени пользователя и email в Git----------------------------------
git config --global user.name "MyUser"
git config --global user.email MyUser@mail.com


----------------------------Настройка имени главной ветки в Git----------------------------------
git config --global init.defaultBranch main


----------------------------Проверка настроек в Git----------------------------------
git config --list


---------------------------Создание Git репозитория----------------------------------
папка .git
git init

---------------------------Начало слежения за файлами в Git----------------------------------
git add index.html
git add script (слежение за папкой)
git add . начало слежения за проектом в Git


----------------------------Подготовка файлов к коммиту в Git---------------------------------
проиндексировать 
git add

---------------------------Выполнение коммитов в Git------------------------------------------
git commit -m "мой первый коммит"

git commit (коммит в текстовом редакторе)

 --------------------------Состояния отслеживаемых файлов Git---------------------------------


M	modified  модифицированный
T	file type changed  Тип файла  изменен
A	added  Добавлено
D	deleted  удалено
R	renamed  переименован
C	copied  скопировано
U	updated but unmerged  обновлены, но не объединены

чтобы вывести статус в короткой форме нужно воспользоваться следующей командой:
git status -short
git status -s

-----------------Определение состояния файлов------------------------------
$ git status
add -  включать слежение за файлами в Git.
new file: index.html  - когда впервые дабавили отслеживание
git add . - Сделайте отслеживаемым каждый файл вашего проекта.
add - эту команду следует рассматривать как добавление текущего состояния файла к новому коммиту.( индексировать файл)

------------------------Игнорирование файлов в Git--------------------------------------------
Это делается с помощью специального файла .gitignore
В этом файле на каждой строке нужно писать путь к файлу или папке, которые мы хотим игнорировать.
⊗gtPmBsIg  20 of 66


------------------------Просмотр изменений файлов в Git----------------------------------------
git diff

------------------------Пропуск индексации измененных файлов в Git-----------------------------
В Git есть возможность одной командой сделать и индексацию файлов и коммит
добавляем к команде commit флаг -a, а команду add пропускаем:
git commit -a



------------------------Удаление файлов в Git--------------------------------------------------
git rm text.txt

------------------------Переименование файлов в Git--------------------------------------------
git mv old.txt new.txt

--------------------------Перемещение файлов в Git---------------------------------------------

git mv old/file.txt new/file.txt

----------------------------Просмотр истории коммитов в Git------------------------------------
git log

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
изменен (modified), индексирован (staged) и зафиксирован (committed)

:q  :Q  ZZ  

git commit -m "мой первый коммит"
git commit -a   - одной командой сделать и индексацию файлов и коммит
git rm text.txt  - удалить ненужный нам файл
git mv old.txt new.txt  - переименования файлов
git mv old/file.txt new/file.txt - для перемещения файлов
git log - просмотреть историю коммитов / log -3  нужно добавить флаг с числом, задающем количество последних коммитов/

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

----------------------------------Флаги истории коммитов в Git-------------------------
-p	Показывает разницу в изменениях каждого коммита.
--stat	Отображает статистику для коммита.
--shortstat	Показывает количество изменений/вставок/удалений при применении команды --stat.
--name-only	Отображает информацию о коммите и имена измененных файлов.
--name-status	Выводит сообщение о списке файлов, которые были изменены, в т.ч. добавлены и удалены.
--relative-date	Отображает дату применения изменений в относительном формате (например, '1 day ago').
--pretty	Меняет формат вывода истории коммитов: =oneline в одну строку, =full - полный и =short - краткий вывод.
--graph	Показывает ветвление веток Git и историю их слияний.
---------------------------------------------------------------------------------------

-----------------------------Флаги для ограничения вывода истории коммитов в Git-------------
-(n)	Показывает последние коммиты с учетом указанного числа.
--since, --after*	Отображает коммиты, сделанные после указанной даты.
--until, --before*	Выводят коммиты, сделанные до указанной даты.
--author*	Отображает коммиты для файлов с указанным автором.
--committer*	Выводит коммиты, сделанные указанным коммитером, т.е. пользователем, вносящим изменения. Автор файла и коммитер могут являться разными пользователями.
grep	Ищет и отображает коммиты, сообщение или примечание которых содержит указанную строку.


------------------------------Редактирование коммита в Git-------------------------------------
git commit --amend

----------------------------------------Отмена индексации файла в Git--------------------------
git restore --staged file.txt   команда restore, с флагом --staged, после которого добавляется имя файла


---------------------------------------Отмена изменений в файле---------------------------------
git restore file.txt


--------------------------------------Псевдонимы команд в Git-----------------------------------
 можно использовать псевдонимы команд. Для этого мы прописываем команду config с флагом --global, после которого указываем слово alias и после точки имя псевдонима.
 Затем после пробела указывается имя команды, для которой мы делаем псевдоним.
Например, давайте сделаем псевдоним для команды commit. Назовем его com:
git config --global alias.com commit
Теперь для создания коммита вам будет достаточно ввести в терминал:

git com
---------------------------------------Создание новой ветки в Git-------------------------------
git branch test
git branch - просмотр веток

---------------------------------------Переключение веток в Git--------------------------------

git checkout test - переключаться между ветками  или 
- git switch test

---------------------------------------Слияние веток в Git--------------------------------------
git merge test - Вольем  в нашу ветку master содержимое ветки test

( git switch test -переходим на ветку тест
git add file.txt- вносим изменения и индексируем их
git commit -m 'commit from test' - коммитим 
git switch master - переходим на ветку мастер
git merge test - вливаем ветку тест в ветку мастер)

---------------------------------------Конфликт при слиянии веток в Git-------------------------
⊗gtPmBrMC39 of 66
--------------------------------------Удаление веток в Git--------------------------------------
git branch -D test
--------------------------------------Переименование веток в Git
git branch --move old new

--------------------------------------Просмотр последнего коммита веток в Git
git branch -v

--------------------------------------Слитые ветки в Git
git branch --merged - просмотр слитых веток
git branch --no-merged - вывод неслитых веток

----------------------------------------Простое перебазирование коммитов в Git
git branch test создаем новую ветку
git switch test переходим на новую ветку
git add file.txt создаем и индексируем новый файл
git commit -m "commit from branch test" коммитим
git checkout test  переключимся на ветку test и перебазируем ее относительно главной ветки maste
git rebase master
git merge test Затем этого можно перейти на ветку master и выполнить слияние перемоткой


--------------------------мой гит хаб----------------------------------------
адрес репозитория 
https://github.com/Katyazlayazaya/project.git
токен
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

Katyazlayazaya

katyaPandora81010 password


-----------------------------------------добавление внешних репозиториев-------------------------------

git remote add origin https://github.com/user/project.git  (origin) - желаемое название внешнего репозитория

-----------------------------------------Просмотр информации внешнего репозитория в Git-----------------------------
git remote show origin
---------------------------------------Получение имени внешнего репозитория в Git------------------------------------
git remote

---------------------------------------Адреса внешнего репозитория в Git---------------------------------------------
git remote -v
--------------------------------------Переименование внешнего репозитория в Git--------------------------------------
git remote rename old new
---------------------------------------Удаление внешнего репозитория в Git-------------------------------------------
git remote rm origin
---------------------------------------Отправка данных во внешний репозиторий в Git----------------------------------
git push -u origin master

короткая форма, при использовании которой будет отправлена текущая активная ветка:
git push

--------------------------------------Отправка в другую ветку в Git--------------------------------------------------
git push origin master:remote_branch    (origin имя репозитория master имя ветки в локальном репозитории  - :remote_branch - имя которое будет во внешнем репозитории)

-------------------------------------Получение изменений из внешних репозиториев в Git-------------------------------
git fetch origin
git merge origin/master (слить перетянутую версию с имеющейся версией)
       или стягивание с одновременным слитием 
git pull origin master

git pull

--------------------------------------Удаление внешних веток в Git-----------------------------------------------------
git push origin --delete test

--------------------------------------Клонирование внешнего репозитория Git---------------------------------------------

git clone https://github.com/some-project
для изменения имени проекта у себя в локальной папке 
git clone https://github.com/some-project my-project